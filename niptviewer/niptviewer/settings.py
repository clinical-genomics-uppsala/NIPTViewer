"""
Django settings for niptviewer project.

Generated by 'django-admin startproject' using Django 3.1.1.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

from pathlib import Path
import os
import logging.config

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

DEBUG = int(os.environ.get("DEBUG", default=0))

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get("SECRET_KEY", None if DEBUG == 0 else "DUMMY")

# SECURITY WARNING: don't run with debug turned on in production!


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'reportvisualiser',
    'dataprocessor',
    'users',
    'wkhtmltopdf'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'niptviewer.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]


def get_secrets(variable, default):
    if os.path.isfile(os.getenv(variable, default)):
        data = ""
        with open(os.getenv(variable), "r") as myfile:
            data = myfile.readlines()
        return data
    else:
        return os.getenv(variable, default)


# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

if os.environ.get('DATABASE', "sqlite3") == "sqlite3":
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }
elif os.environ.get('DATABASE', "sqlite3") == "postgres":
    DATABASES = {
        "default": {
            "ENGINE": os.environ.get("SQL_ENGINE", "django.db.backends.sqlite3"),
            "NAME": os.environ.get("SQL_DATABASE", os.path.join(BASE_DIR, "db.sqlite3")),
            "USER": os.environ.get("SQL_USER", "user"),
            "PASSWORD": os.environ.get("SQL_PASSWORD", "password"),
            "HOST": os.environ.get("SQL_HOST", "localhost"),
            "PORT": os.environ.get("SQL_PORT", "5432"),
        }
    }
elif os.environ.get('DATABASE', "sqlite3") == "mssql":
    DATABASES = {
        "default": {
            "ENGINE": 'mssql',
            "NAME": get_secrets('SQL_DATABASE', os.path.join(BASE_DIR, 'db.sqlite3')),
            "USER": get_secrets('SQL_USER', 'user'),
            "PASSWORD": get_secrets('SQL_PASSWORD', 'password'),
            "HOST": os.environ.get('SQL_HOST', 'localhost'),
            "PORT": os.environ.get('SQL_PORT', ''),
            "OPTIONS": {
                'driver': 'ODBC Driver 17 for SQL Server',
                'host_is_server': True,
                'connection_timeout': 30,
                'collation': 'SQL_Latin1_General_CP1_CI_AS',
                'extra_params': 'TrustServerCertificate=yes;Encrypt=yes',
            }
        }
    }

WSGI_APPLICATION = 'niptviewer.wsgi.application'

# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = "/staticfiles/"
STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")
STATICFILES_DIRS = (
  'assets/',
)

STATICFILES_FINDERS = (
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
)

WKHTMLTOPDF_CMD_OPTIONS = {
    'quiet': True,
}

LOGIN_REDIRECT_URL = "/"
LOGIN_URL = '/login'
LOGOUT_URL = '/logout'
LOGOUT_REDIRECT_URL = '/login'

LimitRequestBody: 102400

CSRF_COOKIE_SECURE: True

SESSION_COOKIE_SECURE: True

ALLOWED_HOSTS = os.environ.get("DJANGO_ALLOWED_HOSTS", "127.0.0.1").split(" ")

DEFAULT_FROM_EMAIL = os.environ.get('FROM_EMAIL', "DUMMAY")

SERVER_EMAIL = os.environ.get('SERVER_EMAIL', "DUMMY")

def get_secrets(variable, default):
    if os.path.isfile(os.getenv(variable, default)):
        data = ""
        with open(os.getenv(variable), "r") as myfile:
            data = myfile.readlines()
        return data
    else:
        return os.getenv(os.getenv(variable, default))


if os.environ.get('DATABASE', "sqlite3") == "postgres":
    DATABASES = {
        "default": {
            "ENGINE": os.environ.get("SQL_ENGINE", "django.db.backends.sqlite3"),
            "NAME": os.environ.get("SQL_DATABASE", os.path.join(BASE_DIR, "db.sqlite3")),
            "USER": os.environ.get("SQL_USER", "user"),
            "PASSWORD": os.environ.get("SQL_PASSWORD", "password"),
            "HOST": os.environ.get("SQL_HOST", "localhost"),
            "PORT": os.environ.get("SQL_PORT", "5432"),
        }
    }
elif os.environ.get('DATABASE', "sqlite3") == "mssql":
    DATABASES = {
        "default": {
            "ENGINE": 'mssql',
            "NAME": os.environ.get("SQL_DATABASE", os.path.join(BASE_DIR, "db.sqlite3")),
            "USER": get_secrets("SQL_USER", "user"),
            "PASSWORD": get_secrets("SQL_PASSWORD", "password"),
            "HOST": os.environ.get("SQL_HOST", "localhost"),
            "PORT": os.environ.get("SQL_PORT", ""),
            "OPTIONS": {
                'driver': 'ODBC Driver 17 for SQL Server',
                'host_is_server': True,
                'connection_timeout': 30,
                'collation': 'SQL_Latin1_General_CP1_CI_AS',
                'extra_params': 'Trusted_Connection=yes;Encrypt=yes',
            }
        }
    }

LOGGING_CONFIG = None
#
# # Get loglevel from env
LOGLEVEL = os.getenv('DJANGO_LOGLEVEL', 'debug').upper()
#
